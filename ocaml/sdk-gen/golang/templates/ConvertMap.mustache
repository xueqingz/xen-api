{{#map}}
{{#serialize}}
func Serialize{{func_partial_type}}(context string, goMap {{go_type}}) (xenMap map[string]interface{}, err error) {
    xenMap = make(map[string]interface{})
    for goKey, goValue := range goMap {
        keyContext := fmt.Sprintf("%s[%s]", context, goKey)
        xenKey, err := Serialize{{go_type_key}}(keyContext, goKey)
        if err != nil {
            return xenMap, err
        }
        xenValue, err := Serialize{{go_type_value}}(keyContext, goValue)
        if err != nil {
            return xenMap, err
        }
        xenMap[xenKey] = xenValue
    }
    return
}

{{/serialize}}
{{#deserialize}}
func Deserialize{{func_partial_type}}(context string, input interface{}) (goMap {{go_type}}, err error) {
    xenMap, ok := input.(map[string]interface{})
    if !ok {
        err = fmt.Errorf("failed to parse XenAPI response: expected Go type %s at %s but got Go type %s with value %v", "map[string]interface{}", context, reflect.TypeOf(input), input)
        return
    }
    goMap = make({{go_type}}, len(xenMap))
    for xenKey, xenValue := range xenMap {
        keyContext := fmt.Sprintf("%s[%s]", context, xenKey)
        goKey, err := Deserialize{{go_type_key}}(keyContext, xenKey)
        if err != nil {
            return goMap, err
        }
        goValue, err := Deserialize{{go_type_value}}(keyContext, xenValue)
        if err != nil {
            return goMap, err
        }
        goMap[goKey] = goValue
    }
    return
}

{{/deserialize}}
{{/map}}